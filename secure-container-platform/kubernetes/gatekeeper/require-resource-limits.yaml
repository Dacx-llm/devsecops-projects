apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequireresourcelimits
spec:
  crd:
    spec:
      names:
        kind: K8sRequireResourceLimits
      validation:
        openAPIV3Schema:
          properties:
            cpuLimit:
              type: string
            memoryLimit:
              type: string
            exemptImages:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequireresourcelimits

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not exempt_image(container)
          not container_has_limits(container)
          msg := sprintf("Container <%v> has no resource limits", [container.name])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          not exempt_image(container)
          not container_has_limits(container)
          msg := sprintf("Init container <%v> has no resource limits", [container.name])
        }

        container_has_limits(container) {
          container.resources.limits.cpu
          container.resources.limits.memory
        }

        exempt_image(container) {
          exemptImage := input.parameters.exemptImages[_]
          startswith(container.image, exemptImage)
        }
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequireResourceLimits
metadata:
  name: require-resource-limits
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces: ["kube-system"]
  parameters:
    cpuLimit: "1000m"
    memoryLimit: "1Gi"
    exemptImages: []
